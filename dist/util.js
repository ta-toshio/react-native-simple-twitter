import HmacSHA1 from 'crypto-js/hmac-sha1';
import * as Base64 from 'crypto-js/enc-base64';
export const randomStrings = (n = 32) => {
    const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    return Array(...Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join('');
};
export const createHeaderString = (params) => `OAuth ${Object.keys(params).sort()
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
    .join(', ')}`;
export const encodeParamsToString = (params) => Object.keys(params).sort()
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
    .join('&');
export const parseFormEncoding = (formEncoded) => formEncoded.split('&').reduce((obj, form) => {
    const [key, value] = form.split('=');
    return { ...obj, [key]: value };
}, {});
export const createTokenRequestHeaderParams = (consumerKey = '', { callback = '', token = '', params = {} }) => Object.assign({}, callback ? { oauth_callback: callback } : {}, {
    oauth_consumer_key: consumerKey,
    oauth_nonce: randomStrings(),
    oauth_signature_method: 'HMAC-SHA1',
    oauth_timestamp: new Date().getTime() / 1000,
}, token ? { oauth_token: token } : {}, { oauth_version: '1.0' }, params);
export const createSignature = (params, method, url, consumerSecret, tokenSecret = null) => {
    const encodedParameters = encodeParamsToString(params)
        .replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
    const encodedRequestURL = encodeURIComponent(url);
    const signature = Base64.stringify(HmacSHA1(`${method}&${encodedRequestURL}&${encodeURIComponent(encodedParameters)}`, tokenSecret ? `${encodeURIComponent(consumerSecret)}&${encodeURIComponent(tokenSecret)}` : `${encodeURIComponent(consumerSecret)}&`));
    return Object.assign({}, params, { oauth_signature: signature });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sUUFBUSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sS0FBSyxNQUFNLE1BQU0sc0JBQXNCLENBQUM7QUFLL0MsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQVUsRUFBRTtJQUN0RCxNQUFNLEdBQUcsR0FBRyxnRUFBZ0UsQ0FBQztJQUU3RSxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25HLENBQUMsQ0FBQztBQUtGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBVyxFQUFVLEVBQUUsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFO0tBQzNGLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUMzRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUtoQixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE1BQVcsRUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUU7S0FDcEYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUtiLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsV0FBbUIsRUFBTyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekcsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUtQLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQUMsY0FBc0IsRUFBRSxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxLQUFLLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDbkksRUFBRSxFQUNGLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDNUM7SUFDRSxrQkFBa0IsRUFBRSxXQUFXO0lBQy9CLFdBQVcsRUFBRSxhQUFhLEVBQUU7SUFDNUIsc0JBQXNCLEVBQUUsV0FBVztJQUNuQyxlQUFlLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJO0NBQzdDLEVBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUNuQyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFDeEIsTUFBTSxDQUNQLENBQUM7QUFLRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFXLEVBQUUsTUFBYyxFQUFFLEdBQVcsRUFBRSxjQUFzQixFQUFFLGNBQTZCLElBQUksRUFBRSxFQUFFO0lBQ3JJLE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO1NBQ25ELE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekIsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVsRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDekMsR0FBRyxNQUFNLElBQUksaUJBQWlCLElBQUksa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUN6RSxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksa0JBQWtCLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUNwSSxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIG5wbSAqL1xuaW1wb3J0IEhtYWNTSEExIGZyb20gJ2NyeXB0by1qcy9obWFjLXNoYTEnO1xuaW1wb3J0ICogYXMgQmFzZTY0IGZyb20gJ2NyeXB0by1qcy9lbmMtYmFzZTY0JztcblxuLyoqXG4gKiByYW5kb20gc3RyaW5ncyAoaW5pdGlhbCBsZW5ndGggLT4gMzIpXG4gKi9cbmV4cG9ydCBjb25zdCByYW5kb21TdHJpbmdzID0gKG46IG51bWJlciA9IDMyKTogc3RyaW5nID0+IHtcbiAgY29uc3Qgc3RyID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcblxuICByZXR1cm4gQXJyYXkoLi4uQXJyYXkobikpLm1hcCgoKSA9PiBzdHIuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHN0ci5sZW5ndGgpKSkuam9pbignJyk7XG59O1xuXG4vKipcbiAqIGNyZWF0ZSBoZWFkZXIuQXV0aG9yaXphdGlvbiBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUhlYWRlclN0cmluZyA9IChwYXJhbXM6IGFueSk6IHN0cmluZyA9PiBgT0F1dGggJHtPYmplY3Qua2V5cyhwYXJhbXMpLnNvcnQoKVxuICAubWFwKGtleSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pfWApXG4gIC5qb2luKCcsICcpfWA7XG5cbi8qKlxuICogY3JlYXRlIHN0cmluZyBvYmplY3Quam9pbigmKVxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlUGFyYW1zVG9TdHJpbmcgPSAocGFyYW1zOiBhbnkpOiBzdHJpbmcgPT4gT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KClcbiAgLm1hcChrZXkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1trZXldKX1gKVxuICAuam9pbignJicpO1xuXG4vKipcbiAqIGlmIGNvbnRlbnQtdHlwZSA9PT0gdGV4dC9odG1sLCBwYXJzZSByZXNwb25zZS50ZXh0KClcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlRm9ybUVuY29kaW5nID0gKGZvcm1FbmNvZGVkOiBzdHJpbmcpOiBhbnkgPT4gZm9ybUVuY29kZWQuc3BsaXQoJyYnKS5yZWR1Y2UoKG9iaiwgZm9ybSkgPT4ge1xuICBjb25zdCBba2V5LCB2YWx1ZV0gPSBmb3JtLnNwbGl0KCc9Jyk7XG4gIHJldHVybiB7IC4uLm9iaiwgW2tleV06IHZhbHVlIH07XG59LCB7fSk7XG5cbi8qKlxuICogY3JlYXRlIHBhcmFtc1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVG9rZW5SZXF1ZXN0SGVhZGVyUGFyYW1zID0gKGNvbnN1bWVyS2V5OiBzdHJpbmcgPSAnJywgeyBjYWxsYmFjayA9ICcnLCB0b2tlbiA9ICcnLCBwYXJhbXMgPSB7fSB9KSA9PiBPYmplY3QuYXNzaWduKFxuICB7fSxcbiAgY2FsbGJhY2sgPyB7IG9hdXRoX2NhbGxiYWNrOiBjYWxsYmFjayB9IDoge30sXG4gIHtcbiAgICBvYXV0aF9jb25zdW1lcl9rZXk6IGNvbnN1bWVyS2V5LFxuICAgIG9hdXRoX25vbmNlOiByYW5kb21TdHJpbmdzKCksXG4gICAgb2F1dGhfc2lnbmF0dXJlX21ldGhvZDogJ0hNQUMtU0hBMScsXG4gICAgb2F1dGhfdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDAsXG4gIH0sXG4gIHRva2VuID8geyBvYXV0aF90b2tlbjogdG9rZW4gfSA6IHt9LFxuICB7IG9hdXRoX3ZlcnNpb246ICcxLjAnIH0sXG4gIHBhcmFtcyxcbik7XG5cbi8qKlxuICogY3JlYXRlIE9BdXRoMS4wIHNpZ25hdHVyZSBmcm9tIHBhcmFtc1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2lnbmF0dXJlID0gKHBhcmFtczogYW55LCBtZXRob2Q6IHN0cmluZywgdXJsOiBzdHJpbmcsIGNvbnN1bWVyU2VjcmV0OiBzdHJpbmcsIHRva2VuU2VjcmV0OiBzdHJpbmcgfCBudWxsID0gbnVsbCkgPT4ge1xuICBjb25zdCBlbmNvZGVkUGFyYW1ldGVycyA9IGVuY29kZVBhcmFtc1RvU3RyaW5nKHBhcmFtcylcbiAgICAucmVwbGFjZSgvIS9nLCAnJTIxJylcbiAgICAucmVwbGFjZSgvJy9nLCAnJTI3JylcbiAgICAucmVwbGFjZSgvXFwoL2csICclMjgnKVxuICAgIC5yZXBsYWNlKC9cXCkvZywgJyUyOScpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnJTJBJyk7XG4gIGNvbnN0IGVuY29kZWRSZXF1ZXN0VVJMID0gZW5jb2RlVVJJQ29tcG9uZW50KHVybCk7XG5cbiAgY29uc3Qgc2lnbmF0dXJlID0gQmFzZTY0LnN0cmluZ2lmeShIbWFjU0hBMShcbiAgICBgJHttZXRob2R9JiR7ZW5jb2RlZFJlcXVlc3RVUkx9JiR7ZW5jb2RlVVJJQ29tcG9uZW50KGVuY29kZWRQYXJhbWV0ZXJzKX1gLFxuICAgIHRva2VuU2VjcmV0ID8gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbnN1bWVyU2VjcmV0KX0mJHtlbmNvZGVVUklDb21wb25lbnQodG9rZW5TZWNyZXQpfWAgOiBgJHtlbmNvZGVVUklDb21wb25lbnQoY29uc3VtZXJTZWNyZXQpfSZgLFxuICApKTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG9hdXRoX3NpZ25hdHVyZTogc2lnbmF0dXJlIH0pO1xufTtcbiJdfQ==