import * as Util from './util';
const request = async (method = 'GET', url = '', params = {}) => {
    const uri = url
        .replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
    const options = {
        method,
        headers: {
            Authorization: Util.createHeaderString(params),
        },
    };
    const result = await fetch(uri, options)
        .then((response) => {
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.indexOf('application/json') !== -1) {
            return response.json();
        }
        return response.text().then(r => Util.parseFormEncoding(r));
    });
    return result;
};
export default request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBRS9CLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxTQUFpQixLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUUsU0FBYyxFQUFFLEVBQUUsRUFBRTtJQUNuRixNQUFNLEdBQUcsR0FBRyxHQUFHO1NBQ1osT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7U0FDcEIsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7U0FDcEIsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7U0FDckIsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7U0FDckIsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV6QixNQUFNLE9BQU8sR0FBRztRQUNkLE1BQU07UUFDTixPQUFPLEVBQUU7WUFDUCxhQUFhLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztTQUMvQztLQUNGLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO1NBQ3JDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNqRSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN4QjtRQUVELE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUwsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBsaWIgKi9cbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi91dGlsJztcblxuY29uc3QgcmVxdWVzdCA9IGFzeW5jIChtZXRob2Q6IHN0cmluZyA9ICdHRVQnLCB1cmw6IHN0cmluZyA9ICcnLCBwYXJhbXM6IGFueSA9IHt9KSA9PiB7XG4gIGNvbnN0IHVyaSA9IHVybFxuICAgIC5yZXBsYWNlKC8hL2csICclMjEnKVxuICAgIC5yZXBsYWNlKC8nL2csICclMjcnKVxuICAgIC5yZXBsYWNlKC9cXCgvZywgJyUyOCcpXG4gICAgLnJlcGxhY2UoL1xcKS9nLCAnJTI5JylcbiAgICAucmVwbGFjZSgvXFwqL2csICclMkEnKTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiBVdGlsLmNyZWF0ZUhlYWRlclN0cmluZyhwYXJhbXMpLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJpLCBvcHRpb25zKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG5cbiAgICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbihyID0+IFV0aWwucGFyc2VGb3JtRW5jb2RpbmcocikpO1xuICAgIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0O1xuIl19